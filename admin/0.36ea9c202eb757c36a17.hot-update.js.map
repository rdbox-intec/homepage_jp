{"version":3,"file":"0.36ea9c202eb757c36a17.hot-update.js","sources":["webpack:///./src/cms/cms.js","webpack:///./src/cms/preview-templates/HomePagePreview.js","webpack:///./src/components/HomePageTemplate/index.js","webpack:///./src/components/Offerings/index.js","webpack:///./src/components/Testimonials/index.js","webpack:///./src/cms/preview-templates/AboutPagePreview.js","webpack:///./src/components/AboutPageTemplate/index.js","webpack:///./src/components/Content/index.js","webpack:///./src/cms/preview-templates/ArticlePreview.js","webpack:///./src/components/ArticleTemplate/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/create-react-context.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-dev.js","webpack:///./.cache/loader.js","webpack:///./.cache/find-page.js","webpack:///./.cache/strip-prefix.js","webpack:///./.cache/emitter.js","webpack:///./.cache/prefetch.js","webpack:///./.cache/socketIo.js","webpack:///./.cache/error-overlay-handler.js","webpack:///./.cache/json-store.js","webpack:///./.cache/page-renderer.js","webpack:///./.cache/api-runner-browser.js","webpack:///./src/layouts/index.js","webpack:///./src/components/NavBar/index.js","webpack:///./src/components/SearchBox/index.js","webpack:///./src/components/Footer/index.js","webpack:///./.cache/parse-path.js"],"sourcesContent":["import CMS from 'netlify-cms'\n\nimport HomePagePreview from './preview-templates/HomePagePreview'\nimport AboutPagePreview from './preview-templates/AboutPagePreview'\nimport ArticlePreview from './preview-templates/ArticlePreview'\n\nCMS.registerPreviewStyle('/styles.css')\nCMS.registerPreviewTemplate('home', HomePagePreview)\nCMS.registerPreviewTemplate('about', AboutPagePreview)\nCMS.registerPreviewTemplate('blog', ArticlePreview)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport HomePageTemplate from '../../components/HomePageTemplate'\n\nconst HomePagePreview = ({ entry, getAsset }) => {\n  const entryBlurbs = entry.getIn(['data', 'offerings', 'blurbs'])\n  const blurbs = entryBlurbs ? entryBlurbs.toJS() : []\n\n  const entryTestimonials = entry.getIn(['data', 'testimonials'])\n  const testimonials = entryTestimonials ? entryTestimonials.toJS() : []\n\n  return (\n    <HomePageTemplate\n      title={entry.getIn(['data', 'title'])}\n      meta_title={entry.getIn(['data', 'meta_title'])}\n      meta_description={entry.getIn(['data', 'meta_description'])}\n      heading={entry.getIn(['data', 'heading'])}\n      description={entry.getIn(['data', 'description'])}\n      offerings={{ blurbs }}\n      testimonials={testimonials}\n    />\n  )\n}\n\nHomePagePreview.propTypes = {\n  entry: PropTypes.shape({\n    getIn: PropTypes.func,\n  }),\n  getAsset: PropTypes.func,\n}\n\nexport default HomePagePreview\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport Offerings from '../Offerings'\nimport Testimonials from '../Testimonials'\nimport PropTypes from 'prop-types'\n\nconst HomePageTemplate = ({\n  title,\n  heading,\n  description,\n  offerings,\n  meta_title,\n  meta_description,\n  testimonials,\n}) => (\n  <div>\n    <Helmet>\n      <title>{meta_title}</title>\n      <meta name='description' content={meta_description} />\n    </Helmet>\n    <section className='hero is-primary is-bold is-small'>\n      <div className='hero-body'>\n        <div className='container'>\n          <div className='columns'>\n            <div className='column is-10 is-offset-1'>\n              <div className='section'>\n              <h1 className='title has-text-centered has-text-weight-semibold is-size-1'>\n                RDBOX\n              </h1>\n              <h1 className='has-text-centered'>\n                ~A Robotics Developers BOX~\n              </h1>\n              <center>\n              <h1 className='has-text-centered'>\n              {title}\n              </h1>\n              </center>\n              <h1>.</h1>\n              <center>\n                <a href=\"https://github.com/rdbox-intec/rdbox\" className=\"button is-outlined\" target=\"_blank\">View on GitHub</a>\n                <a href=\"https://github.com/rdbox-intec/rdbox/wiki\" className=\"button is-primary\" target=\"_blank\">Take the Tutorial</a>\n              </center>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    <section className='section section--gradient'>\n      <div className='container'>\n\n        <div className='section'>\n          <div className='columns'>\n            <div className='column is-10 is-offset-1'>\n              <div className='content'>\n                <div>\n                  <h1 className='has-text-weight-semibold is-size-2'>\n                    {heading}\n                  </h1>\n                  <p>{description}</p>\n                </div>\n                <Offerings gridItems={offerings.blurbs} />\n                <h1 className='has-text-weight-semibold is-size-2'>See case studies</h1>\n                <Testimonials testimonials={testimonials} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n)\n\nHomePageTemplate.propTypes = {\n  title: PropTypes.string,\n  meta_title: PropTypes.string,\n  meta_description: PropTypes.string,\n  heading: PropTypes.string,\n  description: PropTypes.string,\n  offerings: PropTypes.shape({\n    blurbs: PropTypes.array,\n  }),\n  testimonials: PropTypes.array,\n\n}\n\nexport default HomePageTemplate\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Offerings = ({ gridItems }) => (\n  <div className='columns is-multiline'>\n    {gridItems.map(item => (\n      <div key={item.image} className='column is-6' style={{borderRadius: '5px'}}>\n        <section className='section'>\n          <p className='has-text-centered'>\n            <img alt='' src={item.image} />\n          </p>\n          <p>{item.text}</p>\n        </section>\n      </div>\n    ))}\n  </div>\n)\n\nOfferings.propTypes = {\n  gridItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.string,\n      text: PropTypes.string,\n    })\n  ),\n}\n\nexport default Offerings\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Testimonials = ({testimonials}) => (\n  <div>\n    {testimonials.map((testimonial, id) => (\n      <article className='message' key={id}>\n        <div className='message-body'>\n          {testimonial.quote}\n          <br />\n          <cite> â€“ {testimonial.author}</cite>\n        </div>\n      </article>\n    ))}\n  </div>\n)\n\nTestimonials.propTypes = {\n  testimonials: PropTypes.arrayOf(\n    PropTypes.shape({\n      quote: PropTypes.string,\n      author: PropTypes.string,\n    })\n  ),\n}\n\nexport default Testimonials\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AboutPageTemplate from '../../components/AboutPageTemplate'\n\nconst AboutPagePreview = ({ entry, widgetFor }) => (\n  <AboutPageTemplate\n    title={entry.getIn(['data', 'title'])}\n    meta_title={entry.getIn(['data', 'meta_title'])}\n    meta_description={entry.getIn(['data', 'meta_description'])}\n    content={widgetFor('body')}\n  />\n)\n\nAboutPagePreview.propTypes = {\n  entry: PropTypes.shape({\n    getIn: PropTypes.func,\n  }),\n  widgetFor: PropTypes.func,\n}\n\nexport default AboutPagePreview\n","import React from 'react'\nimport Content from '../Content'\nimport PropTypes from 'prop-types'\n\nconst AboutPageTemplate = ({title, content, contentComponent}) => {\n  const PageContent = contentComponent || Content\n\n  return (\n    <div>\n      <section className='hero is-primary is-bold is-small'>\n        <div className='hero-body'>\n          <div className='container'>\n            <div className='columns'>\n              <div className='column is-10 is-offset-1'>\n                <div className='section'>\n                  <h1 className='title'>\n                    {title}\n                  </h1>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className='section section--gradient'>\n        <div className='container'>\n          <div className='columns'>\n            <div className='column is-10 is-offset-1'>\n              <div className='section'>\n                <img alt='' src='https://rdbox-intec.github.io/homepage_en/img/dream.png' />\n                <PageContent className='content' content={content} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nAboutPageTemplate.propTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  contentComponent: PropTypes.func,\n}\n\nexport default AboutPageTemplate\n","import React from 'react'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nexport default Content\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ArticleTemplate from '../../components/ArticleTemplate'\n\nconst ArticlePreview = ({entry, widgetFor}) => {\n  return (\n    <ArticleTemplate\n      content={widgetFor('body')}\n      cover={entry.getIn(['data', 'cover'])}\n      meta_title={entry.getIn(['data', 'meta_title'])}\n      meta_desc={entry.getIn(['data', 'meta_description'])}\n      title={entry.getIn(['data', 'title'])}\n      slug={entry.getIn(['data', 'slug'])}\n    />\n  )\n}\n\nArticlePreview.propTypes = {\n  entry: PropTypes.shape({\n    getIn: PropTypes.func,\n  }),\n  widgetFor: PropTypes.func,\n}\n\nexport default ArticlePreview\n","import React from 'react'\nimport Content from '../Content'\nimport { kebabCase } from 'lodash'\nimport { Link } from 'gatsby'\n\nconst ArticleTemplate = ({\n  content,\n  contentComponent,\n  cover,\n  meta_title,\n  meta_desc,\n  tags,\n  title,\n}) => {\n  const PostContent = contentComponent || Content\n  return (\n    <div>\n      <h1 className='title is-size-2 has-text-weight-bold is-bold-light'>\n        {title}\n      </h1>\n      <img src={cover} alt={title} />\n      <PostContent content={content} />\n      <div style={{ marginTop: `4rem` }}>\n        <h4>Tags</h4>\n        <ul className='taglist'>\n          {(tags && tags.length)\n            ? tags.map(tag => (\n              <li key={tag + `tag`}>\n                <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n              </li>\n            ))\n            : null\n          }\n        </ul>\n      </div>\n      <hr />\n    </div>\n  )\n}\n\nexport default ArticleTemplate\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","import React from \"react\"\n\nexport default React.createContext\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport pages from \"./pages.json\"\nimport loader from \"./loader\"\nimport JSONStore from \"./json-store\"\n\nconst DevPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(JSONStore, {\n    pages,\n    location,\n    pageResources,\n  })\n}\n\nDevPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default DevPageRenderer\n","import pageFinderFactory from \"./find-page\"\nimport emitter from \"./emitter\"\nimport prefetchHelper from \"./prefetch\"\n\nconst preferDefault = m => (m && m.default) || m\n\nlet devGetPageData\nlet inInitialRender = true\nlet hasFetched = Object.create(null)\nlet syncRequires = {}\nlet asyncRequires = {}\nlet jsonDataPaths = {}\nlet fetchHistory = []\nlet fetchingPageResourceMapPromise = null\nlet fetchedPageResourceMap = false\n/**\n * Indicate if pages manifest is loaded\n *  - in production it is split to separate \"pages-manifest\" chunk that need to be lazy loaded,\n *  - in development it is part of single \"common\" chunk and is available from the start.\n */\nlet hasPageResourceMap = process.env.NODE_ENV !== `production`\nlet apiRunner\nconst failedPaths = {}\nconst MAX_HISTORY = 5\n\nconst jsonPromiseStore = {}\n\nif (process.env.NODE_ENV !== `production`) {\n  devGetPageData = require(`./socketIo`).getPageData\n}\n\n/**\n * Fetch resource map (pages data and paths to json files with results of\n *  queries)\n */\nconst fetchPageResourceMap = () => {\n  if (!fetchingPageResourceMapPromise) {\n    fetchingPageResourceMapPromise = new Promise(resolve => {\n      asyncRequires\n        .data()\n        .then(({ pages, dataPaths }) => {\n          // TODO â€” expose proper way to access this data from plugins.\n          // Need to come up with an API for plugins to access\n          // site info.\n          window.___dataPaths = dataPaths\n          queue.addPagesArray(pages)\n          queue.addDataPaths(dataPaths)\n          hasPageResourceMap = true\n          resolve((fetchedPageResourceMap = true))\n        })\n        .catch(e => {\n          console.warn(\n            `Failed to fetch pages manifest. Gatsby will reload on next navigation.`\n          )\n          // failed to grab pages metadata\n          // for now let's just resolve this - on navigation this will cause missing resources\n          // and will trigger page reload and then it will retry\n          // this can happen with service worker updates when webpack manifest points to old\n          // chunk that no longer exists on server\n          resolve((fetchedPageResourceMap = true))\n        })\n    })\n  }\n  return fetchingPageResourceMapPromise\n}\n\nconst createJsonURL = jsonName => `${__PATH_PREFIX__}/static/d/${jsonName}.json`\nconst createComponentUrls = componentChunkName =>\n  window.___chunkMapping[componentChunkName].map(\n    chunk => __PATH_PREFIX__ + chunk\n  )\n\nconst fetchResource = resourceName => {\n  // Find resource\n  let resourceFunction\n  if (resourceName.slice(0, 12) === `component---`) {\n    resourceFunction = asyncRequires.components[resourceName]\n  } else {\n    if (resourceName in jsonPromiseStore) {\n      resourceFunction = () => jsonPromiseStore[resourceName]\n    } else {\n      resourceFunction = () => {\n        const fetchPromise = new Promise((resolve, reject) => {\n          const url = createJsonURL(jsonDataPaths[resourceName])\n          const req = new XMLHttpRequest()\n          req.open(`GET`, url, true)\n          req.withCredentials = true\n          req.onreadystatechange = () => {\n            if (req.readyState == 4) {\n              if (req.status === 200) {\n                resolve(JSON.parse(req.responseText))\n              } else {\n                delete jsonPromiseStore[resourceName]\n                reject()\n              }\n            }\n          }\n          req.send(null)\n        })\n        jsonPromiseStore[resourceName] = fetchPromise\n        return fetchPromise\n      }\n    }\n  }\n\n  // Download the resource\n  hasFetched[resourceName] = true\n  return new Promise(resolve => {\n    const fetchPromise = resourceFunction()\n    let failed = false\n    return fetchPromise\n      .catch(() => {\n        failed = true\n      })\n      .then(component => {\n        fetchHistory.push({\n          resource: resourceName,\n          succeeded: !failed,\n        })\n\n        fetchHistory = fetchHistory.slice(-MAX_HISTORY)\n\n        resolve(component)\n      })\n  })\n}\n\nconst prefetchResource = resourceName => {\n  if (resourceName.slice(0, 12) === `component---`) {\n    return Promise.all(\n      createComponentUrls(resourceName).map(url => prefetchHelper(url))\n    )\n  } else {\n    const url = createJsonURL(jsonDataPaths[resourceName])\n    return prefetchHelper(url)\n  }\n}\n\nconst getResourceModule = resourceName =>\n  fetchResource(resourceName).then(preferDefault)\n\nconst appearsOnLine = () => {\n  const isOnLine = navigator.onLine\n  if (typeof isOnLine === `boolean`) {\n    return isOnLine\n  }\n\n  // If no navigator.onLine support assume onLine if any of last N fetches succeeded\n  const succeededFetch = fetchHistory.find(entry => entry.succeeded)\n  return !!succeededFetch\n}\n\nconst handleResourceLoadError = (path, message) => {\n  if (!failedPaths[path]) {\n    failedPaths[path] = message\n  }\n\n  if (\n    appearsOnLine() &&\n    window.location.pathname.replace(/\\/$/g, ``) !== path.replace(/\\/$/g, ``)\n  ) {\n    window.location.pathname = path\n  }\n}\n\nconst onPrefetchPathname = pathname => {\n  if (!prefetchTriggered[pathname]) {\n    apiRunner(`onPrefetchPathname`, { pathname })\n    prefetchTriggered[pathname] = true\n  }\n}\n\nconst onPostPrefetchPathname = pathname => {\n  if (!prefetchCompleted[pathname]) {\n    apiRunner(`onPostPrefetchPathname`, { pathname })\n    prefetchCompleted[pathname] = true\n  }\n}\n\n/**\n * Check if we should fallback to resources for 404 page if resources for a page are not found\n *\n * We can't do that when we don't have full pages manifest - we don't know if page exist or not if we don't have it.\n * We also can't do that on initial render / mount in case we just can't load resources needed for first page.\n * Not falling back to 404 resources will cause \"EnsureResources\" component to handle scenarios like this with\n * potential reload\n * @param {string} path Path to a page\n */\nconst shouldFallbackTo404Resources = path =>\n  (hasPageResourceMap || inInitialRender) && path !== `/404.html`\n\n// Note we're not actively using the path data atm. There\n// could be future optimizations however around trying to ensure\n// we load all resources for likely-to-be-visited paths.\n// let pathArray = []\n// let pathCount = {}\n\nlet findPage\nlet pathScriptsCache = {}\nlet prefetchTriggered = {}\nlet prefetchCompleted = {}\nlet disableCorePrefetching = false\n\nconst queue = {\n  addPagesArray: newPages => {\n    findPage = pageFinderFactory(newPages, __PATH_PREFIX__)\n  },\n  addDevRequires: devRequires => {\n    syncRequires = devRequires\n  },\n  addProdRequires: prodRequires => {\n    asyncRequires = prodRequires\n  },\n  addDataPaths: dataPaths => {\n    jsonDataPaths = dataPaths\n  },\n  // Hovering on a link is a very strong indication the user is going to\n  // click on it soon so let's start prefetching resources for this\n  // pathname.\n  hovering: path => {\n    queue.getResourcesForPathname(path)\n  },\n  enqueue: path => {\n    if (!apiRunner)\n      console.error(`Run setApiRunnerForLoader() before enqueing paths`)\n\n    // Skip prefetching if we know user is on slow or constrained connection\n    if (`connection` in navigator) {\n      if ((navigator.connection.effectiveType || ``).includes(`2g`)) {\n        return false\n      }\n      if (navigator.connection.saveData) {\n        return false\n      }\n    }\n\n    // Tell plugins with custom prefetching logic that they should start\n    // prefetching this path.\n    onPrefetchPathname(path)\n\n    // If a plugin has disabled core prefetching, stop now.\n    if (disableCorePrefetching.some(a => a)) {\n      return false\n    }\n\n    // Check if the page exists.\n    let page = findPage(path)\n\n    // In production, we lazy load page metadata. If that\n    // hasn't been fetched yet, start fetching it now.\n    if (\n      process.env.NODE_ENV === `production` &&\n      !page &&\n      !fetchedPageResourceMap\n    ) {\n      // If page wasn't found check and we didn't fetch resources map for\n      // all pages, wait for fetch to complete and try find page again\n      return fetchPageResourceMap().then(() => queue.enqueue(path))\n    }\n\n    if (!page) {\n      return false\n    }\n\n    if (\n      process.env.NODE_ENV !== `production` &&\n      process.env.NODE_ENV !== `test`\n    ) {\n      devGetPageData(page.path)\n    }\n\n    // Prefetch resources.\n    if (process.env.NODE_ENV === `production`) {\n      Promise.all([\n        prefetchResource(page.jsonName),\n        prefetchResource(page.componentChunkName),\n      ]).then(() => {\n        // Tell plugins the path has been successfully prefetched\n        onPostPrefetchPathname(path)\n      })\n    }\n\n    return true\n  },\n\n  getPage: pathname => findPage(pathname),\n\n  getResourceURLsForPathname: path => {\n    const page = findPage(path)\n    if (page) {\n      return [\n        ...createComponentUrls(page.componentChunkName),\n        createJsonURL(jsonDataPaths[page.jsonName]),\n      ]\n    } else {\n      return null\n    }\n  },\n\n  getResourcesForPathnameSync: path => {\n    const page = findPage(path)\n    if (page) {\n      return pathScriptsCache[page.path]\n    } else if (shouldFallbackTo404Resources(path)) {\n      return queue.getResourcesForPathnameSync(`/404.html`)\n    } else {\n      return null\n    }\n  },\n\n  // Get resources (code/data) for a path. Fetches metdata first\n  // if necessary and then the code/data bundles. Used for prefetching\n  // and getting resources for page changes.\n  getResourcesForPathname: path =>\n    new Promise((resolve, reject) => {\n      // Production code path\n      if (failedPaths[path]) {\n        handleResourceLoadError(\n          path,\n          `Previously detected load failure for \"${path}\"`\n        )\n        reject()\n        return\n      }\n      const page = findPage(path)\n\n      // In production, we lazy load page metadata. If that\n      // hasn't been fetched yet, start fetching it now.\n      if (\n        !page &&\n        !fetchedPageResourceMap &&\n        process.env.NODE_ENV === `production`\n      ) {\n        // If page wasn't found check and we didn't fetch resources map for\n        // all pages, wait for fetch to complete and try to get resources again\n        fetchPageResourceMap().then(() =>\n          resolve(queue.getResourcesForPathname(path))\n        )\n        return\n      }\n\n      if (!page) {\n        if (shouldFallbackTo404Resources(path)) {\n          console.log(`A page wasn't found for \"${path}\"`)\n\n          // Preload the custom 404 page\n          resolve(queue.getResourcesForPathname(`/404.html`))\n          return\n        }\n\n        resolve()\n        return\n      }\n\n      // Use the path from the page so the pathScriptsCache uses\n      // the normalized path.\n      path = page.path\n\n      // Check if it's in the cache already.\n      if (pathScriptsCache[path]) {\n        emitter.emit(`onPostLoadPageResources`, {\n          page,\n          pageResources: pathScriptsCache[path],\n        })\n        resolve(pathScriptsCache[path])\n        return\n      }\n\n      // Nope, we need to load resource(s)\n      emitter.emit(`onPreLoadPageResources`, {\n        path,\n      })\n\n      // In development we know the code is loaded already\n      // so we just return with it immediately.\n      if (process.env.NODE_ENV !== `production`) {\n        const pageResources = {\n          component: syncRequires.components[page.componentChunkName],\n          page,\n        }\n\n        // Add to the cache.\n        pathScriptsCache[path] = pageResources\n        devGetPageData(page.path).then(pageData => {\n          emitter.emit(`onPostLoadPageResources`, {\n            page,\n            pageResources,\n          })\n          // Tell plugins the path has been successfully prefetched\n          onPostPrefetchPathname(path)\n\n          resolve(pageResources)\n        })\n      } else {\n        Promise.all([\n          getResourceModule(page.componentChunkName),\n          getResourceModule(page.jsonName),\n        ]).then(([component, json]) => {\n          if (!(component && json)) {\n            resolve(null)\n            return\n          }\n\n          const pageResources = {\n            component,\n            json,\n            page,\n          }\n          pageResources.page.jsonURL = createJsonURL(\n            jsonDataPaths[page.jsonName]\n          )\n          pathScriptsCache[path] = pageResources\n          resolve(pageResources)\n\n          emitter.emit(`onPostLoadPageResources`, {\n            page,\n            pageResources,\n          })\n\n          // Tell plugins the path has been successfully prefetched\n          onPostPrefetchPathname(path)\n        })\n      }\n    }),\n}\n\nexport const postInitialRenderWork = () => {\n  inInitialRender = false\n  if (process.env.NODE_ENV === `production`) {\n    // We got all resources needed for first mount,\n    // we can fetch resoures for all pages.\n    fetchPageResourceMap()\n  }\n}\n\nexport const setApiRunnerForLoader = runner => {\n  apiRunner = runner\n  disableCorePrefetching = apiRunner(`disableCorePrefetching`)\n}\n\nexport const publicLoader = {\n  getResourcesForPathname: queue.getResourcesForPathname,\n  getResourceURLsForPathname: queue.getResourceURLsForPathname,\n  getResourcesForPathnameSync: queue.getResourcesForPathnameSync,\n}\n\nexport default queue\n","// TODO add tests especially for handling prefixed links.\nimport { match as matchPath } from \"@reach/router/lib/utils\"\nimport stripPrefix from \"./strip-prefix\"\n\nconst pageCache = {}\n\nexport default (pages, pathPrefix = ``) => rawPathname => {\n  let pathname = decodeURIComponent(rawPathname)\n\n  // Remove the pathPrefix from the pathname.\n  let trimmedPathname = stripPrefix(pathname, pathPrefix)\n\n  // Remove any hashfragment\n  if (trimmedPathname.split(`#`).length > 1) {\n    trimmedPathname = trimmedPathname\n      .split(`#`)\n      .slice(0, -1)\n      .join(``)\n  }\n\n  // Remove search query\n  if (trimmedPathname.split(`?`).length > 1) {\n    trimmedPathname = trimmedPathname\n      .split(`?`)\n      .slice(0, -1)\n      .join(``)\n  }\n\n  if (pageCache[trimmedPathname]) {\n    return pageCache[trimmedPathname]\n  }\n\n  let foundPage\n  // Array.prototype.find is not supported in IE so we use this somewhat odd\n  // work around.\n  pages.some(page => {\n    let pathToMatch = page.matchPath ? page.matchPath : page.path\n    if (matchPath(pathToMatch, trimmedPathname)) {\n      foundPage = page\n      pageCache[trimmedPathname] = page\n      return true\n    }\n\n    // Finally, try and match request with default document.\n    if (matchPath(`${page.path}index.html`, trimmedPathname)) {\n      foundPage = page\n      pageCache[trimmedPathname] = page\n      return true\n    }\n\n    return false\n  })\n\n  return foundPage\n}\n","/**\n * Remove a prefix from a string. Return the input string if the given prefix\n * isn't found.\n */\n\nexport default (str, prefix = ``) => {\n  if (str.substr(0, prefix.length) === prefix) return str.slice(prefix.length)\n  return str\n}\n","import mitt from \"mitt\"\n\nconst emitter = mitt()\nexport default emitter\n","const support = function(feature) {\n  if (typeof document === `undefined`) {\n    return false\n  }\n  const fakeLink = document.createElement(`link`)\n  try {\n    if (fakeLink.relList && typeof fakeLink.relList.supports === `function`) {\n      return fakeLink.relList.supports(feature)\n    }\n  } catch (err) {\n    return false\n  }\n  return false\n}\n\nconst linkPrefetchStrategy = function(url) {\n  return new Promise((resolve, reject) => {\n    if (typeof document === `undefined`) {\n      reject()\n      return\n    }\n\n    const link = document.createElement(`link`)\n    link.setAttribute(`rel`, `prefetch`)\n    link.setAttribute(`href`, url)\n\n    link.onload = resolve\n    link.onerror = reject\n\n    const parentElement =\n      document.getElementsByTagName(`head`)[0] ||\n      document.getElementsByName(`script`)[0].parentNode\n    parentElement.appendChild(link)\n  })\n}\n\nconst xhrPrefetchStrategy = function(url) {\n  return new Promise((resolve, reject) => {\n    const req = new XMLHttpRequest()\n    req.open(`GET`, url, true)\n    req.withCredentials = true\n\n    req.onload = () => {\n      if (req.status === 200) {\n        resolve()\n      } else {\n        reject()\n      }\n    }\n\n    req.send(null)\n  })\n}\n\nconst supportedPrefetchStrategy = support(`prefetch`)\n  ? linkPrefetchStrategy\n  : xhrPrefetchStrategy\n\nconst preFetched = {}\n\nconst prefetch = function(url) {\n  return new Promise(resolve => {\n    if (preFetched[url]) {\n      resolve()\n      return\n    }\n\n    supportedPrefetchStrategy(url)\n      .then(() => {\n        resolve()\n        preFetched[url] = true\n      })\n      .catch(() => {}) // 404s are logged to the console anyway\n  })\n}\n\nexport default prefetch\n","import { reportError, clearError } from \"./error-overlay-handler\"\n\nlet socket = null\n\nlet staticQueryData = {}\nlet pageQueryData = {}\nlet isInitialized = false\n\nexport const getStaticQueryData = () => staticQueryData\nexport const getPageQueryData = () => pageQueryData\nexport const getIsInitialized = () => isInitialized\n\nexport default function socketIo() {\n  if (process.env.NODE_ENV !== `production`) {\n    if (!socket) {\n      // Try to initialize web socket if we didn't do it already\n      try {\n        // eslint-disable-next-line no-undef\n        socket = io()\n\n        const didDataChange = (msg, queryData) =>\n          !(msg.payload.id in queryData) ||\n          JSON.stringify(msg.payload.result) !==\n            JSON.stringify(queryData[msg.payload.id])\n\n        socket.on(`message`, msg => {\n          if (msg.type === `staticQueryResult`) {\n            if (didDataChange(msg, staticQueryData)) {\n              staticQueryData = {\n                ...staticQueryData,\n                [msg.payload.id]: msg.payload.result,\n              }\n            }\n          } else if (msg.type === `pageQueryResult`) {\n            if (didDataChange(msg, pageQueryData)) {\n              pageQueryData = {\n                ...pageQueryData,\n                [msg.payload.id]: msg.payload.result,\n              }\n            }\n          } else if (msg.type === `overlayError`) {\n            if (msg.payload.message) {\n              reportError(msg.payload.id, msg.payload.message)\n            } else {\n              clearError(msg.payload.id)\n            }\n          }\n          if (msg.type && msg.payload) {\n            ___emitter.emit(msg.type, msg.payload)\n          }\n        })\n      } catch (err) {\n        console.error(`Could not connect to socket.io on dev server.`)\n      }\n    }\n    return socket\n  } else {\n    return null\n  }\n}\n\nconst inFlightGetPageDataPromiseCache = {}\nfunction getPageData(pathname) {\n  if (inFlightGetPageDataPromiseCache[pathname]) {\n    return inFlightGetPageDataPromiseCache[pathname]\n  } else {\n    inFlightGetPageDataPromiseCache[pathname] = new Promise(resolve => {\n      if (pageQueryData[pathname]) {\n        delete inFlightGetPageDataPromiseCache[pathname]\n        resolve(pageQueryData[pathname])\n      } else {\n        const onPageDataCallback = msg => {\n          if (msg.type === `pageQueryResult` && msg.payload.id === pathname) {\n            socket.off(`message`, onPageDataCallback)\n            delete inFlightGetPageDataPromiseCache[pathname]\n            resolve(pageQueryData[pathname])\n          }\n        }\n        socket.on(`message`, onPageDataCallback)\n\n        socket.emit(`getDataForPath`, pathname)\n      }\n    })\n  }\n  return inFlightGetPageDataPromiseCache[pathname]\n}\n\n// Tell websocket-manager.js the new path we're on.\n// This will help the backend prioritize queries for this\n// path.\nfunction registerPath(path) {\n  socket.emit(`registerPath`, path)\n}\n\n// Unregister the former path\nfunction unregisterPath(path) {\n  socket.emit(`unregisterPath`, path)\n}\n\nexport { getPageData, registerPath, unregisterPath }\n","import * as ErrorOverlay from \"react-error-overlay\"\n\n// Report runtime errors\nErrorOverlay.startReportingRuntimeErrors({\n  onError: () => {},\n  filename: `/commons.js`,\n})\nErrorOverlay.setEditorHandler(errorLocation =>\n  window.fetch(\n    `/__open-stack-frame-in-editor?fileName=` +\n      window.encodeURIComponent(errorLocation.fileName) +\n      `&lineNumber=` +\n      window.encodeURIComponent(errorLocation.lineNumber || 1)\n  )\n)\n\nconst errorMap = {}\n\nconst handleErrorOverlay = () => {\n  const errors = Object.values(errorMap)\n  if (errors.length > 0) {\n    const errorMsg = errors.join(`\\n\\n`)\n    ErrorOverlay.reportBuildError(errorMsg)\n  } else {\n    ErrorOverlay.dismissBuildError()\n  }\n}\n\nexport const clearError = errorID => {\n  delete errorMap[errorID]\n  handleErrorOverlay()\n}\n\nexport const reportError = (errorID, error) => {\n  if (error) {\n    errorMap[errorID] = error\n  }\n  handleErrorOverlay()\n}\n\nexport { errorMap }\n","import React from \"react\"\n\nimport PageRenderer from \"./page-renderer\"\nimport { StaticQueryContext } from \"gatsby\"\nimport {\n  getStaticQueryData,\n  getPageQueryData,\n  registerPath as socketRegisterPath,\n  unregisterPath as socketUnregisterPath,\n} from \"./socketIo\"\n\nif (process.env.NODE_ENV === `production`) {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. JSONStore is Gatsby internal ` +\n      `development-only component and should never be used in production.\\n\\n` +\n      `Unless your site has a complex or custom webpack/Gatsby ` +\n      `configuration this is likely a bug in Gatsby. ` +\n      `Please report this at https://github.com/gatsbyjs/gatsby/issues ` +\n      `with steps to reproduce this error.`\n  )\n}\n\nconst getPathFromProps = props =>\n  props.pageResources && props.pageResources.page\n    ? props.pageResources.page.path\n    : undefined\n\nclass JSONStore extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      staticQueryData: getStaticQueryData(),\n      pageQueryData: getPageQueryData(),\n      path: null,\n    }\n  }\n\n  handleMittEvent = (type, event) => {\n    this.setState({\n      staticQueryData: getStaticQueryData(),\n      pageQueryData: getPageQueryData(),\n    })\n  }\n\n  componentDidMount() {\n    socketRegisterPath(getPathFromProps(this.props))\n    ___emitter.on(`*`, this.handleMittEvent)\n  }\n\n  componentWillUnmount() {\n    socketUnregisterPath(this.state.path)\n    ___emitter.off(`*`, this.handleMittEvent)\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const newPath = getPathFromProps(props)\n    if (newPath !== state.path) {\n      socketUnregisterPath(state.path)\n      socketRegisterPath(newPath)\n      return {\n        path: newPath,\n      }\n    }\n\n    return null\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // We want to update this component when:\n    // - location changed\n    // - page data for path changed\n    // - static query results changed\n\n    return (\n      this.props.location !== nextProps.location ||\n      this.state.path !== nextState.path ||\n      this.state.pageQueryData[nextState.path] !==\n        nextState.pageQueryData[nextState.path] ||\n      this.state.staticQueryData !== nextState.staticQueryData\n    )\n  }\n\n  render() {\n    const data = this.state.pageQueryData[getPathFromProps(this.props)]\n    // eslint-disable-next-line\n    const { pages, ...propsWithoutPages } = this.props\n    if (!data) {\n      return <div />\n    }\n\n    return (\n      <StaticQueryContext.Provider value={this.state.staticQueryData}>\n        <PageRenderer {...propsWithoutPages} {...data} />\n      </StaticQueryContext.Provider>\n    )\n  }\n}\n\nexport default JSONStore\n","import React, { createElement } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { publicLoader } from \"./loader\"\nimport { apiRunner } from \"./api-runner-browser\"\n\n// Renders page\nclass PageRenderer extends React.Component {\n  render() {\n    const props = {\n      ...this.props,\n      pathContext: this.props.pageContext,\n    }\n\n    const [replacementElement] = apiRunner(`replaceComponentRenderer`, {\n      props: this.props,\n      loader: publicLoader,\n    })\n\n    const pageElement =\n      replacementElement ||\n      createElement(this.props.pageResources.component, {\n        ...props,\n        key: this.props.pageResources.page.path,\n      })\n\n    const wrappedPage = apiRunner(\n      `wrapPageElement`,\n      { element: pageElement, props },\n      pageElement,\n      ({ result }) => {\n        return { element: result, props }\n      }\n    ).pop()\n\n    return wrappedPage\n  }\n}\n\nPageRenderer.propTypes = {\n  location: PropTypes.object.isRequired,\n  pageResources: PropTypes.object.isRequired,\n  data: PropTypes.object,\n  pageContext: PropTypes.object.isRequired,\n}\n\nexport default PageRenderer\n","const plugins = require(`./api-runner-browser-plugins`)\nconst {\n  getResourcesForPathname,\n  getResourcesForPathnameSync,\n  getResourceURLsForPathname,\n} = require(`./loader`).publicLoader\n\nexports.apiRunner = (api, args = {}, defaultReturn, argTransform) => {\n  // Hooks for cypress-gatsby's API handler\n  if (window.Cypress) {\n    if (window.___apiHandler) {\n      window.___apiHandler(api)\n    } else if (window.___resolvedAPIs) {\n      window.___resolvedAPIs.push(api)\n    } else {\n      window.___resolvedAPIs = [api]\n    }\n  }\n\n  let results = plugins.map(plugin => {\n    if (!plugin.plugin[api]) {\n      return undefined\n    }\n\n    args.getResourcesForPathnameSync = getResourcesForPathnameSync\n    args.getResourcesForPathname = getResourcesForPathname\n    args.getResourceURLsForPathname = getResourceURLsForPathname\n\n    const result = plugin.plugin[api](args, plugin.options)\n    if (result && argTransform) {\n      args = argTransform({ args, result, plugin })\n    }\n    return result\n  })\n\n  // Filter out undefined results.\n  results = results.filter(result => typeof result !== `undefined`)\n\n  if (results.length > 0) {\n    return results\n  } else if (defaultReturn) {\n    return [defaultReturn]\n  } else {\n    return []\n  }\n}\n\nexports.apiRunnerAsync = (api, args, defaultReturn) =>\n  plugins.reduce(\n    (previous, next) =>\n      next.plugin[api]\n        ? previous.then(() => next.plugin[api](args, next.options))\n        : previous,\n    Promise.resolve()\n  )\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport NavBar from '../components/NavBar'\nimport Footer from '../components/Footer'\nimport '../assets/sass/styles.sass'\nimport config from '../../data/config'\n\nclass TemplateWrapper extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {isActive: false}\n    this.toggleNavbar = this.toggleNavbar.bind(this)\n  }\n\n  toggleNavbar () {\n    this.setState({isActive: !this.state.isActive})\n  }\n\n  render () {\n    return (\n      <div>\n        <Helmet>\n          <title>{config.siteTitle}</title>\n          <meta name='description' content={config.siteDescription} />\n        </Helmet>\n        <NavBar isActive={this.state.isActive} toggleNavbar={() => this.toggleNavbar()} />\n        <div>{this.props.children}</div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default TemplateWrapper\n","import React from 'react'\nimport {Link, graphql, StaticQuery} from 'gatsby'\nimport SearchBox from '../SearchBox'\n\nconst NavBar = ({toggleNavbar, isActive}) => (\n  <StaticQuery\n    query={graphql`\n            query SearchIndexQuery {\n                siteSearchIndex {\n                    index\n                }\n            }\n        `}\n    render={data => (\n      <nav className='navbar is-fixed-top' aria-label='main navigation'>\n        <div className='navbar-brand'>\n          <Link to='/' className='navbar-item'>\n            <img src=\"https://rdbox-intec.github.io/homepage_en/icons/icon-192x192.png\"></img>\n            <strong>&nbsp;&nbsp;&nbsp;RDBOX</strong>\n          </Link>\n          <button\n            className={`button navbar-burger ${isActive ? 'is-active' : ''}`}\n            data-target='navMenu'\n            onClick={toggleNavbar}\n          >\n            <span />\n            <span />\n            <span />\n          </button>\n        </div>\n        <div className={`navbar-menu ${isActive ? 'is-active' : ''}`} id='navMenu'>\n\n          <div className='navbar-end'>\n            <SearchBox searchIndex={data.siteSearchIndex.index} />\n            <Link className='navbar-item' to='/about'>\n                            About\n            </Link>\n            <Link className='navbar-item' to='/blog'>\n                            Blog\n            </Link>\n          </div>\n        </div>\n      </nav>\n    )}\n  />\n)\n\nexport default NavBar\n","import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport { Index } from 'elasticlunr'\n\nexport default class SearchBox extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      query: ``,\n      results: [],\n      isActive: false,\n    }\n  }\n\n  render () {\n    return (\n      <div className={`navbar-item ${this.state.isActive ? 'is-active' : ''}`}>\n        <input\n          className='input navbar-link is-rounded is-primary'\n          type='text'\n          value={this.state.query}\n          onChange={this.search}\n          placeholder='Search'\n        />\n        <div className='navbar-dropdown'>\n          {this.state.results.map(page => (\n            <Link className='navbar-item' key={page.id} to={page.slug}>{page.title}</Link>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  getOrCreateIndex = () =>\n    this.index\n      ? this.index\n      : Index.load(this.props.searchIndex);\n\n  search = evt => {\n    const query = evt.target.value\n    this.index = this.getOrCreateIndex()\n    this.setState({\n      query,\n      // Query the index with search string to get an [] of IDs\n      results: this.index\n        .search(query, { expand: true }) // Accept partial matches\n        // Map over each ID and return the full document\n        .map(({ ref }) => this.index.documentStore.getDoc(ref)),\n      isActive: !!query,\n    })\n  };\n}\n","import React from 'react'\nimport config from '../../../data/config'\n\nconst Footer = () => {\n  return (\n    <footer className='footer'>\n      <div className='container'>\n        <div className='content has-text-centered'>\n          <p>\n            {config.copyright}\n          </p>\n          <p>Powered by <a href='https://www.gatsbyjs.org'>Gatsby</a> and <a href='https://www.netlifycms.org'>Netlify CMS</a> | <a href='https://github.com/v4iv/gatsby-starter-business'>Github Repository</a></p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","export default function parsePath(path) {\n  var pathname = path || `/`\n  var search = ``\n  var hash = ``\n\n  var hashIndex = pathname.indexOf(`#`)\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex)\n    pathname = pathname.substr(0, hashIndex)\n  }\n\n  var searchIndex = pathname.indexOf(`?`)\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex)\n    pathname = pathname.substr(0, searchIndex)\n  }\n\n  return {\n    pathname: pathname,\n    search: search === `?` ? `` : search,\n    hash: hash === `#` ? `` : hash,\n  }\n}\n"],"mappings":"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ACA;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AASA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA,iBAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA,iBAQA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA,eA6BA;AACA;AA9GA;AA9GA;AA+NA;AACA;AACA;AAAA,eAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9bA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAhDA;;;;;;;;;ACNA;AAAA;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;ACRA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5EA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,WAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AAEA;AACA;AACA;AACA;AAMA,aASA;AACA;AACA;AAAA;AAAA;AACA;AAIA;;;;;AACA;AAAA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AAbA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;;AArEA;AACA;AAsEA;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AACA;AACA;AAEA;AAFA;AACA;AAFA;AAOA;AACA;AAFA;AANA;AACA;AAUA;AAIA;AAFA;AAKA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;;AA9BA;AACA;AA+BA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AC7CA;AACA;AAIA;AAHA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAFA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;AAxBA;AACA;AAyBA;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAHA;AAUA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAxBA;AARA;AADA;AACA;AA0CA;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AAAA;AACA;AAFA;AA4BA;AAAA;AACA;AA7BA;AAkCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AAPA;AASA;AACA;AA5CA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;;AA5BA;AACA;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}